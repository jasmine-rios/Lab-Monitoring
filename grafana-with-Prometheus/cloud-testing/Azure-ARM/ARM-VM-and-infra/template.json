{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "allowedValues": [
                "AzureGov.USVirginia",
                "eastus"
            ]
        },
        "networkInterfaceName": {
            "type": "string"
        },
        "networkInterfaceNameHost1": {
            "type": "string"
        },
        "networkInterfaceNameHost2": {
            "type": "string"
        },
        "networkSecurityGroupName": {
            "type": "string"
        },
        "networkSecurityGroupNameHost1": {
            "type": "string"
        },
        "networkSecurityGroupNameHost2": {
            "type": "string"
        },
        "networkSecurityGroupRules": {
            "type": "array"
        },
        "networkSecurityGroupRulesHost1": {
            "type": "array"
        },
        "networkSecurityGroupRulesHost2": {
            "type": "array"
        },
        "publicIpAddressName": {
            "type": "string"
        },
        "publicIpAddressType": {
            "type": "string"
        },
        "publicIpAddressSku": {
            "type": "string"
        },
        "publicIpAddressNameHost1": {
			"type": "string"
		},
		"publicIpAddressNameHost2": {
			"type": "string"
		},
        "virtualMachineName": {
            "type": "string"
        },
        "virtualMachineHost1Name": {
            "type": "string"
        },
        "virtualMachineHost2Name": {
            "type": "string"
        },
        "osDiskType": {
            "type": "string"
        },
        "virtualMachineSize": {
            "type": "string"
        },
        "virtualMachineSizeHosts": {
            "type": "string"
        },
        "adminUsername": {
            "type": "string"
        },
        "securityType": {
            "type": "string"
        },
        "secureBoot": {
            "type": "bool"
        },
        "vTPM": {
            "type": "bool"
        },
        "sshPublicKey": {
            "type": "string"
        },
        "virtualNetworkName": {
            "type": "string"
        },
        "Subnet1": {
            "type": "string"
        },
        "Subnet2": {
            "type": "string"
        }
    },
    "functions": [],
    "variables": {},
    "resources": [
    {
        "name": "[parameters('virtualNetworkName')]",
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2022-11-01",
        "location": "[parameters('location')]",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "10.0.0.0/16"
                ]
            },
            "subnets": [
                {
                    "name": "[parameters('Subnet1')]",
                    "properties": {
                        "addressPrefix": "10.0.1.0/24"
                    }
                },
                {
                    "name": "[parameters('Subnet2')]",
                    "properties": {
                        "addressPrefix": "10.0.2.0/24"
                    }
                }
            ]
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
    {
        "name": "[parameters('networkInterfaceName')]",
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2022-11-01",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
            "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressName'))]",
            "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
        ],
        "properties": {
            "ipConfigurations": [
                {
                    "name": "ipconfig1",
                    "properties": {
                        "subnet": {
                            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/subnets/', parameters('Subnet1'))]"
                        },
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIpAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))]"
                        }
                    }
                }
            ],
            "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
            }
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
    {
        "name": "[parameters('networkInterfaceNameHost1')]",
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2022-11-01",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupNameHost1'))]",
            "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressNameHost1'))]",
            "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
        ],
        "properties": {
            "ipConfigurations": [
                {
                    "name": "ipconfig1",
                    "properties": {
                        "subnet": {
                            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/subnets/', parameters('Subnet1'))]"
                        },
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIpAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('publicIpAddressNameHost1'))]"
                        }
                    }
                }
            ],
            "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupNameHost1'))]"
            }
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
        {
        "name": "[parameters('networkInterfaceNameHost2')]",
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2022-11-01",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupNameHost2'))]",
            "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressNameHost2'))]",
            "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
        ],
        "properties": {
            "ipConfigurations": [
                {
                    "name": "ipconfig1",
                    "properties": {
                        "subnet": {
                            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/subnets/', parameters('Subnet2'))]"
                        },
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIpAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('publicIpAddressNameHost2'))]"
                        }
                    }
                }
            ],
            "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupNameHost2'))]"
            }
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
    {
        "name": "[parameters('networkSecurityGroupName')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
            "securityRules": "[parameters('networkSecurityGroupRules')]"
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
    {
        "name": "[parameters('networkSecurityGroupNameHost1')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
            "securityRules": "[parameters('networkSecurityGroupRulesHost1')]"
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
    {
        "name": "[parameters('networkSecurityGroupNameHost2')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
            "securityRules": "[parameters('networkSecurityGroupRulesHost2')]"
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
    {
        "name": "[parameters('publicIpAddressName')]",
        "type": "Microsoft.Network/publicIpAddresses",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
            "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
        },
        "sku": {
            "name": "[parameters('publicIpAddressSku')]"
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
        {
        "name": "[parameters('publicIpAddressNameHost1')]",
        "type": "Microsoft.Network/publicIpAddresses",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
            "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
        },
        "sku": {
            "name": "[parameters('publicIpAddressSku')]"
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
            {
        "name": "[parameters('publicIpAddressNameHost2')]",
        "type": "Microsoft.Network/publicIpAddresses",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
            "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
        },
        "sku": {
            "name": "[parameters('publicIpAddressSku')]"
        },
        "tags": {
            "Template by": "Jasmine Rios",
            "Project": "Grafana"
        }
    },
{
  "name": "[parameters('virtualMachineName')]",
  "type": "Microsoft.Compute/virtualMachines",
  "apiVersion": "2021-03-01",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]"
  ],
  "properties": {
    "hardwareProfile": {
      "vmSize": "[parameters('virtualMachineSize')]"
    },
    "securityProfile": {
        "securityType": "[parameters('securityType')]",
        "uefiSettings": {
            "secureBootEnabled": "[parameters('secureBoot')]",
            "vTpmEnabled": "[parameters('vTPM')]"
        }
  },
    "diagnosticsProfile": {
        "bootDiagnostics": {
            "enabled": true
        }
    },
    "storageProfile": {
      "osDisk": {
        "createOption": "fromImage",
        "managedDisk": {
          "storageAccountType": "[parameters('osDiskType')]"
        }
      },
      "imageReference": {
        "publisher": "redhat",
        "offer": "rhel-raw",
        "sku": "92_gen2",
        "version": "latest"
      }
    },
    "networkProfile": {
      "networkInterfaces": [
        {
          "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
        }
      ]
    },
    "osProfile": {
        "computerName": "[parameters('virtualMachineName')]",
        "adminUsername": "[parameters('adminUsername')]",
        "customData": "base64(#cloud-config\npackage_upgrade: true\npackages:\n  - grafana-enterprise # Install Grafana package\n\nruncmd:\n  - if systemctl is-active --quiet grafana-server; then\n      logger -t cloud-init \"Grafana is already installed and started.\";\n    else\n      sudo wget -O grafana.tar.gz https://dl.grafana.com/enterprise/release/grafana-enterprise-10.3.3-1.x86_64.rpm # Latest package, change if not latest;\n      sudo tar -xvzf grafana.tar.gz -C /usr/local/;\n      sudo systemctl enable grafana-server;\n      sudo systemctl daemon-reload;\n      sudo firewall-cmd --zone=public --add-port=3000/tcp --permanent;\n      sudo sed -i 's/;protocol = http/protocol = http/' /etc/grafana/grafana.ini;\n      sudo sed -i 's/;http_port = 3000/http_port = 3000/' /etc/grafana/grafana.ini;\n      sudo tee /etc/systemd/system/grafana-server.service <<EOF\n      [Unit]\n      Description=Grafana\n      Wants=network-online.target\n      After=network-online.target\n\n      [Service]\n      Type=simple\n      ExecStart=/usr/local/grafana\n      Restart=always\n\n      [Install]\n      WantedBy=multi-user.target\n      EOF\n      sudo systemctl start grafana-server;\n      if systemctl is-active --quiet grafana-server; then\n          logger -t cloud-init \"Grafana successfully installed and started.\";\n      else\n          logger -t cloud-init \"Grafana setup encountered an issue. Check Grafana service status using 'sudo systemctl status grafana-server'.\";\n      fi;\n  - sudo wget -O prometheus.tar.gz https://github.com/prometheus/prometheus/releases/download/v2.51.1/prometheus-2.51.1.linux-amd64.tar.gz;\n  - sudo tar -xvf prometheus.tar.gz -C /usr/local/;\n  - cd \"/usr/local/bin/prometheus.tar.gz\";\n  - sudo chmod +x prometheus;\n  - sudo mkdir -p /etc/prometheus/data;\n  - sudo mv prometheus.yml /etc/prometheus/;\n  - sudo tee /etc/systemd/system/prometheus.service <<EOF\n    [Unit]\n    Description=Prometheus Monitoring\n    Wants=network-online.target\n    After=network-online.target\n\n    [Service]\n    Type=simple\n    ExecStart=/usr/local/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/etc/prometheus/data\n    Restart=always\n\n    [Install]\n    WantedBy=multi-user.target\n   EOF;\n  - sudo systemctl daemon-reload;\n  - sudo systemctl enable prometheus;\n  - sudo systemctl start prometheus;\n  - if systemctl is-active --quiet prometheus; then\n      logger -t cloud-init \"Prometheus successfully installed and started.\";\n    else\n      logger -t cloud-init \"Prometheus setup encountered an issue. Check Prometheus service status using 'sudo systemctl status prometheus'.\";\n    fi;\n  - sudo wget -O pushgateway.tar.gz https://github.com/prometheus/pushgateway/releases/download/v1.7.0/pushgateway-1.7.0.linux-amd64.tar.gz;\n  - sudo tar -xvf pushgateway.tar.gz -C /usr/local/;\n  - sudo tee /etc/systemd/system/pushgateway.service <<EOF\n    [Unit]\n    Description=Prometheus Push Gateway\n    Wants=network-online.target\n    After=network-online.target\n\n    [Service]\n    Type=simple\n    ExecStart=/usr/local/pushgateway\n    Restart=always\n\n    [Install]\n    WantedBy=multi-user.target\n    EOF;\n  - sudo systemctl daemon-reload;\n  - sudo systemctl enable pushgateway;\n  - sudo systemctl start pushgateway;\n  - PROMETHEUS_CONFIG_FILE=\"/etc/prometheus/prometheus.yml\";\n  - cat >> \"$PROMETHEUS_CONFIG_FILE\" <<EOF\n    scrape_configs:\n      - job_name: 'prometheus'\n        static_configs:\n          - targets:\n            - 'localhost:9090' # Prometheus running on the same server\n      - job_name: 'pushgateway'\n        static_configs:\n          - targets:\n            - 'localhost:9091' # Push Gateway running on the same server\n    EOF;\n  - echo \"You must add the IPs to the prometheus.yml file and remember not to use tab but use space to ensure the yaml will work\";\n  - echo \"If using traditonal prometheus with a node exporter on systems, also called the pull method, add the IPs you want to monitor after localhost on the prometheus job. Follow the IPs with a colon and 9090 and a comment on what the server is. You must have the node exporter on the target systems.\";\n  - echo \"If using the pushgatway method for temporary jobs or Windows VMs, add the IPs you want to monitor after localhost on the gateway job. Follow the IPs with a colon and 9091 and a comment on what the server is. You must have 9091 enabled on the target systems.\";\n  - echo \"After completion of adding the IPs and saving the prometheus.yml file, start Prometheus with 'sudo systemctl restart prometheus'.\";\n)",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
              "keyData": "[parameters('sshPublicKey')]"
            }
          ]
        }
      }
    }
  },
  "tags": {
    "Template by": "Jasmine Rios",
    "Project": "Grafana"
  }
},
{
  "name": "[parameters('virtualMachineHost1Name')]",
  "type": "Microsoft.Compute/virtualMachines",
  "apiVersion": "2021-03-01",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceNameHost1'))]"
  ],
  "properties": {
    "hardwareProfile": {
      "vmSize": "[parameters('virtualMachineSizeHosts')]"
    },
    "securityProfile": {
        "securityType": "[parameters('securityType')]",
        "uefiSettings": {
            "secureBootEnabled": "[parameters('secureBoot')]",
            "vTpmEnabled": "[parameters('vTPM')]"
        }
  },
    "diagnosticsProfile": {
        "bootDiagnostics": {
            "enabled": true
        }
    },
    "storageProfile": {
      "osDisk": {
        "createOption": "fromImage",
        "managedDisk": {
          "storageAccountType": "[parameters('osDiskType')]"
        }
      },
      "imageReference": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "18.04-LTS",
        "version": "latest"
      }
    },
    "networkProfile": {
      "networkInterfaces": [
        {
          "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceNameHost1'))]"
        }
      ]
    },
    "osProfile": {
        "computerName": "[parameters('virtualMachineHost1Name')]",
        "adminUsername": "[parameters('adminUsername')]",
        "customData": "base64(#cloud-config\npackage_upgrade: true\npackages:\n  - wget\n  - tar\nruncmd:\n  - sudo apt update\n  - sudo apt install -y wget tar\n  - sudo wget -O node-exporter.tar.gz https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz\n  - sudo tar -xvzf node-exporter.tar.gz -C /usr/local/\n  - sudo ufw allow 9090/tcp\n  - cd /usr/local/node_exporter-1.7.0.linux-amd64\n  - sudo tee /etc/systemd/system/node-exporter.service <<EOF\n    [Unit]\n    Description=Prometheus Node Exporter\n    Wants=network-online.target\n    After=network-online.target\n\n    [Service]\n    Type=simple\n    ExecStart=/usr/local/node_exporter-1.7.0.linux-amd64/node_exporter\n    Restart=always\n\n    [Install]\n    WantedBy=multi-user.target\n   EOF\n  - sudo systemctl daemon-reload\n  - sudo systemctl enable node-exporter\n  - sudo systemctl start node-exporter\n  - if systemctl is-active --quiet node-exporter; then\n      logger -t cloud-init 'Node exporter successfully installed and started.';\n    else\n      logger -t cloud-init 'Node-exporter setup encountered an issue. Check node-exporter service status using ''sudo systemctl status node-exporter''.';\n    fi\n)",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                {
                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                    "keyData": "[parameters('sshPublicKey')]"
                }
                ]
            }
        }
    }
  }
},
{
  "name": "[parameters('virtualMachineHost2Name')]",
  "type": "Microsoft.Compute/virtualMachines",
  "apiVersion": "2021-03-01",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceNameHost2'))]"
  ],
  "properties": {
    "hardwareProfile": {
      "vmSize": "[parameters('virtualMachineSizeHosts')]"
    },
    "securityProfile": {
        "securityType": "[parameters('securityType')]",
        "uefiSettings": {
            "secureBootEnabled": "[parameters('secureBoot')]",
            "vTpmEnabled": "[parameters('vTPM')]"
        }
  },
    "diagnosticsProfile": {
        "bootDiagnostics": {
            "enabled": true
        }
    },
    "storageProfile": {
      "osDisk": {
        "createOption": "fromImage",
        "managedDisk": {
          "storageAccountType": "[parameters('osDiskType')]"
        }
      },
    "imageReference": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "latest"
    }
    },
    "networkProfile": {
      "networkInterfaces": [
        {
          "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceNameHost2'))]"
        }
      ]
    },
    "osProfile": {
        "computerName": "[parameters('virtualMachineHost2Name')]",
        "adminUsername": "[parameters('adminUsername')]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                {
                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                    "keyData": "[parameters('sshPublicKey')]"
                }
                ]
            }
        }
    }
  }
}
],
    "outputs": {
        "SSH Instructions": {
            "type": "string",
            "value": "[concat('To SSH into the instance, use the following command:\nssh -i <path-to-private-key>/<name-of-private-key> ', parameters('adminUsername'), '@', reference(resourceId('Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))).ipAddress, '\nPlease remember to change permissions of the private key with `chmod 400 <path-to-private-key>/<name-of-private-key>` before SSHing.')]"

        }
    }
}
